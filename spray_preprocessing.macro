#!/bin/python
#___________________________________________________________________________
# Python Script to display Spray axis and Cone in GUI
#
# spray_preprocessing.macro
#
# Created by: Karim Elwan
#             Carsten Schmalhorst
# AVL Deutschland GmbH, 2009-2020
#
# All rights reserved. No part of this publication may be reproduced, transmitted, transcribed, stored in a
# retrieval system or translated into any language or computer language, in any form or by any means,
# electronic, mechanical, magnetic, optical, chemical, manual or otherwise, without prior written consent
# of AVL.

# This document describes how to run the above-mentioned tool in the context of a regular 
# AVL AST Software installation environment. It does not attempt to discuss all the concepts of computer 
# simulation required to obtain successful solutions. It is the userÂ’s responsibility to determine if 
# he/she has enough knowledge and understanding of his/her task to apply this software appropriately.

# This software and document are distributed solely on an "as is" basis. The entire risk as to their quality
# and performance is with the user. Should either the software or this document proves defective, the
# user assumes the entire cost of all necessary servicing, repair, or correction. AVL and its distributors
# will not be liable for direct, indirect, incidental, or consequential damages resulting from any defect in
# the software or this document, even if they have been advised of the possibility of such damage.
#___________________________________________________________________________

# USER INPUT:

casename = 'Case'                       # define Case name (no slashes)
# example: 'Case'
display_axis = 1                        # type 1 to display spray axis in GUI
display_cones = 1                       # type 1 to display spray cone in GUI
multiplier = 0.2                        # all vectors will be scaled to this length value (m)
resolution = 40
#___________________________________________________________________________
import os
import math
import numpy as np
#!/usr/bin/python

__author__="schmalhc"
__date__ ="$Jan 16, 2019 14:00:00 PM$"
__doc__  = """
nh3averagesetup.py
python script to create frml files needed for restartable nh3-averaging into case.
Modifies ssf to include 3D-results
creates include directory for frml-files used
For UI_NH3 please use SSF editor and frml-files in include

(C) AVL Deutschland GmbH 2012, Carsten Schmalhorst
usage:
    in project dir, start cfdwm_python nh3average.py caseName
    or start as macro from within cfdwm
"""
import os
import sys
from string import Template
import string
import subprocess

try:
    del(sys.modules['pygtk'])
except KeyError:
    pass
try:
    del(sys.modules['gtk'])
except KeyError:
    pass

import pygtk
pygtk.require('2.0')
import gtk

basedir = os.getcwd()

#----------------------------------------------------------
NonSILength = {'m':1,'dm':0.10,'cm':0.01,'mm':0.001,'microns':1e-6,'yd':0.914,'ft':0.304804,'in':0.0254, 'mym':1e-6}
NonSIAngle  = {'deg': math.pi/180. ,'rad':1}
UNITS = { 'length':NonSILength, 'angle':NonSIAngle}
#-----------------------------------------------------------

def readValueFromSSF( myvalue ):
    groesse = myvalue[3][1:-1].split('~')
    if(myvalue[1]=="double"):
        if len(groesse)==1:
            return float(myvalue[2])
        else:
            return float(myvalue[2])*UNITS[groesse[0]][groesse[1]]
    elif myvalue[1]=="int":
        return int(myvalue[2])
    else:
        return myvalue[2]

def makeVector( list1, list2, list3):
    """
        takes three lists of floats that must be of equal length (x, y, z)
        and creates a numpy array of 3 coords.
    """
    veclist = []
    for i in range(0,len(list1)):
        vec = np.zeros(3)
        vec[0] = list1[i]
        vec[1] = list2[i]
        vec[2] = list3[i]
        veclist.append(vec)
    return veclist

#def getKsi(rotvec):
#    """
#        Creates the KSI axis as used in FIRE local spray coordinate system
#    """
#    mask = np.zeros(3)
#    ksi = np.zeros(3);
#    mask[0] = 1
#    mask[1] = 1
#    xy =  np.dot(rotvec,mask)==0
#    if xy:
#        ksi[1] = 1
#    else:
#        ksi[2] = 1
#    ksi = np.cross(rotvec,ksi)
#    print ksi
#    ksi /= np.linalg.norm(ksi)
#    print ksi
#    if xy:
#      if ksi[0]<0:
#        ksi=-ksi
#    else:
#      if ksi[1]<0:
#        ksi = -ksi
#    print ksi
#    return ksi

def getKsi(rotvec):
    """
        Creates the KSI axis as used in FIRE local spray coordinate system
    """
    ksi = np.cross(rotvec,(0,0,1))
    xy = False
    if (np.linalg.norm(ksi)<1e-30):
        xy = True
        ksi = np.cross(rotvec,(0,1,0))

    ksi /= np.linalg.norm(ksi)
    if xy:
        if ksi[0]<0:
            ksi=-ksi
    else:
        if ksi[1]<0:
            ksi = -ksi
    return ksi

def makeAxisRotation(direction, angle):
    """
        Creates a numpy array for the rotation about axis direction with angle
    """
    d = np.array(direction)
    d/=np.linalg.norm(d)
    eye = np.eye(3)
    ddt = np.outer(d,d)
    skew = np.array( [ [0, -d[2], d[1]],
                     [d[2], 0, -d[0]],
                     [-d[1], d[0],0] ])
    mtx = ddt + np.cos(angle) * (eye-ddt) + np.sin(angle)*skew
    return mtx

def makeCone(dir, ksi, length, resolution, d1, angle, reverse=False):
    """
        returns an array of points which approximates an open cone
    """
    print d1, angle
    retval = []
    if reverse:
        rot = makeAxisRotation(dir, math.pi*2./resolution)
    else:
        rot = makeAxisRotation(dir, -math.pi*2./resolution)

    for i in range(0, resolution):
        p1 = ksi*d1
        p2 = dir*length + ksi*(d1+length*math.tan(angle))

        for i in range(0,len(retval)):
            retval[i] = np.dot(rot, retval[i])

        retval.append(p1)
        retval.append(p2)

    return retval

def writeConeAsFLMA(cones, filename):
    """
        cones is a list of lists of points
        cones List<List<ndarray>>
        writes cones coded in points into filename in .flma-format
    """
    totnump = 0
    for cone in cones:
        totnump += len(cone)

    if not filename.endswith(".flma"):
        filename += ".flma"

    coneflma = open(filename, "w")
    coneflma.write(str(totnump))
    coneflma.write("\n")
    for points in cones:
        for p in points:
            coneflma.write( " %g %g %g" % (p[0], p[1], p[2]) )
        coneflma.write("\n")
    coneflma.write(" %d\n" % (totnump/2))
    totnump = 0
    for points in cones:
        np = len(points)
        i =0
        while i<np:
            coneflma.write("4\n %d %d %d %d\n" %(
                (i%np)+totnump,
                ((i+1)% np)+totnump,
                ((i+3) % np)+totnump,
                ((i+2) %np)+totnump))
            i += 2
        coneflma.write("\n")
        totnump += np
    coneflma.write(" %d\n" % (totnump/2))
    for i in range(0, totnump/2):
        coneflma.write(" 3")
    coneflma.write("\n\n0\n")
    coneflma.close()

def doChanges(casename):

    NOZ=[]
    print '\n'
    print '###############################################################################################################'

    prepath = basedir
    path=os.path.join(prepath,'Calculation')
    casepath=os.path.join(path, casename)
    macropath=os.path.join(prepath, 'Macro')
    if not os.path.exists(macropath):
        os.makedirs(macropath)
    if not os.path.exists(casepath):
        print "Case:", casename, " does not exist"
        casename='Case'
    casepath=os.path.join(path, casename)

    ssfname=casename+'.ssf'
    ssfpath=os.path.join(casepath,ssfname)
    ssf = open(ssfpath, "r")

    i = 0
    j = 1

    ssftxt = ssf.read()

    n = ssftxt.count('ge01')
    nozzles = n-1

    print "found ", nozzles, "nozzles"
    ssf.close()

    ssfFileName=casename+'.ssf'
    ssfFilePath=os.path.join(path,casename,ssfFileName)
    ssf = open(ssfFilePath, 'r')
#    logFilePath=os.path.join(macropath,'sprayCones.log')
#    log=open(logFilePath,'w')
#    log.close()
#    log=open(logFilePath,'a')

    outervectors = []
    innervectors = []

    tokenSearch = {
            'ge01':[],  # nozzle x-coordinates
            'ge02':[],  # nozzle y-coordinates
            'ge03':[],  # nozzle z-coordinates
            'ge04':[],  # nozzle x-direction
            'ge05':[],  # nozzle y-direction
            'ge06':[],  # nozzle z-direction
            'ge11':[],  # diameter at hole center position
            'ge12':[],  # number of nozzle holes
            'ge13':[],  # delta 1: orientation angle
            'ge14':[],  # delta 2: rotation angle
            'ge15':[],  # circumferential distribution
            'di05':[],  # half outer cone angle
            'di06':[],  # half inner cone angle
            'di03':[],  # outer diameter
            'di04':[]   # inner diameter
    }

    # loop counts number of nozzles and gets necessary data
    for line in ssf.readlines():
        tokens = line.split()
        if len(tokens)>0:
            if tokens[0] in tokenSearch.keys():
                tokenSearch[tokens[0]].append(readValueFromSSF(tokens))

    ssf.close()

    ge01_list = tokenSearch['ge01']
    ge02_list = tokenSearch['ge02']
    ge03_list = tokenSearch['ge03']
    ge04_list = tokenSearch['ge04']
    ge05_list = tokenSearch['ge05']
    ge06_list = tokenSearch['ge06']
    ge11_list = tokenSearch['ge11']
    ge12_list = tokenSearch['ge12']
    ge13_list = tokenSearch['ge13']
    ge14_list = tokenSearch['ge14']
    ge15_list = tokenSearch['ge15']
    di05_list = tokenSearch['di05']
    di06_list = tokenSearch['di06']
    di03_list = tokenSearch['di03']
    di04_list = tokenSearch['di04']

    inozzles = int(nozzles)
    snozzles = str(nozzles)


    #prepare array for finding identical nozzles (timing might be different)
    NOZ=[[] for i in range(inozzles)]
    print inozzles
    for l in range(0,inozzles):
        NOZ[l].append(tokenSearch['ge01'][l])
        NOZ[l].append(tokenSearch['ge02'][l])
        NOZ[l].append(tokenSearch['ge03'][l])
        NOZ[l].append(tokenSearch['ge04'][l])
        NOZ[l].append(tokenSearch['ge05'][l])
        NOZ[l].append(tokenSearch['ge06'][l])
        NOZ[l].append(tokenSearch['ge11'][l])
        NOZ[l].append(tokenSearch['ge12'][l])
        NOZ[l].append(tokenSearch['ge13'][l])
        NOZ[l].append(tokenSearch['ge14'][l])
        NOZ[l].append(tokenSearch['ge15'][l])
        NOZ[l].append(tokenSearch['di05'][l])
        NOZ[l].append(tokenSearch['di06'][l])
        NOZ[l].append(tokenSearch['di03'][l])
        NOZ[l].append(tokenSearch['di04'][l])

    g=0
    for nozz in NOZ:
        print nozz
        if NOZ.count(nozz)>1:
            NOZ[g]=[]
            #NOZ.remove(nozz)
        g=g+1

    # now identical nozzles are marked, as they do not appear in list NOZ
    # create location and direction vectors. Normalize direction vectors
    locvecs = makeVector(tokenSearch['ge01'], tokenSearch['ge02'], tokenSearch['ge03'])
    dirvecs = makeVector(tokenSearch['ge04'], tokenSearch['ge05'], tokenSearch['ge06'])
    for i in range(0,len(dirvecs)):
        p =dirvecs[i]
        dirvecs[i] = p/np.linalg.norm(p)

    for k in range(0, len(NOZ)):
        if NOZ[k]==[]:
            pass
        else:
            print "nozzle", k+1
            sn = str(n)
            print "   "
    # get nozzle values

            hd = ge11_list[k]
            nh = ge12_list[k]                   # number of nozzle holes
            print "nh = " + str(nh)
            delta_1_rad = ge13_list[k]                  # angle  delta1 (Spreizwinkel)
            delta_2_rad = ge14_list[k]                  # angle delta2 (verdrehung der Duese)
            di = ge15_list[k]                   # distribution

            outercone = di05_list[k]                    # outer cone angle
            innercone = di06_list[k]                    # inner cone angle
            outerdiam = di03_list[k]                    # outer diameter
            innerdiam = di04_list[k]                    # innerdiam

            rotvec = dirvecs[k]
            locvec = locvecs[k]
            rotvec_scaled = rotvec*multiplier
            sprayvec = -rotvec

    # calculate nozzle ksi-axis by cross product
    # ksi is on x-y-plane, i.e. plane normal = (0, 0, 1)
    # exception: nozzle direction = (0, 0, 1), then ksi is the x-axis
            print rotvec
            ksi = getKsi(rotvec)
            eta = np.cross(ksi, rotvec)
    # get normalized ksi-axis
            print "ksi-axis"
            print str(ksi)
            print "eta-axis"
            print str(eta)
            rot1 = makeAxisRotation(eta, delta_1_rad/2.)
            print str(rot1)
            rot2 = makeAxisRotation(rotvec, delta_2_rad) # incremental rotation of full nozzle
            if di==0:
                rot_angle = math.pi*2./nh
            else:
                print "di:", di
                #rot_angle = di/180.*math.pi  # sic!
                rot_angle = di
            rot3 = makeAxisRotation(rotvec, rot_angle)
            sprayvex = []
            inconevex = []
            outconevex = []

            for i in range(0,nh):
                if outerdiam > 0:
                    outcone = makeCone(sprayvec, ksi, multiplier, resolution, outerdiam/2, outercone)
                    for i in range(0,len(outcone)):
                        p = outcone[i]
                        p = np.dot(rot1, p)
                        np.add(p,ksi*hd/2,p)
                        p = np.dot(rot2, p)
                        outcone[i] = p
                else:
                    outcone = None

                if innercone > 0:
                    incone = makeCone(sprayvec, ksi, multiplier, resolution, innerdiam/2, innercone,True)
                    for i in range(0,len(incone)):
                        p = incone[i]
                        p = np.dot(rot1, p)
                        np.add(p,ksi*hd/2,p)
                        p = np.dot(rot2, p)
                        incone[i] = p
                else:
                    incone = None

                p1 = np.zeros(3)
                p2 = sprayvec*multiplier
                p1 = np.dot(rot1, p1)
                p2 = np.dot(rot1, p2)
                np.add(p1, ksi*hd/2, p1)
                np.add(p2, ksi*hd/2, p2)
                p1 = np.dot(rot2, p1)
                p2 = np.dot(rot2, p2)

                for j in range(0,len(sprayvex)):
                    sprayvex[j] = np.dot(rot3, sprayvex[j])

                for cone in inconevex:
                    if not cone ==None:
                        for j in range(0,len(cone)):
                            cone[j] = np.dot(rot3,cone[j])
                for cone in outconevex:
                    if not cone ==None:
                        for j in range(0,len(cone)):
                            cone[j] = np.dot(rot3,cone[j])

                sprayvex.append(p1)
                sprayvex.append(p2)
                outconevex.append(outcone)
                if incone:
                    outconevex.append(incone)

            for p in sprayvex:
                p += locvec

            for cone in outconevex:
                if not cone ==None:
                    for p in cone:
                        p +=locvec

            if display_cones:
                outconename = "cone_noz_"+str(k)
                meshList = PreGetMeshes()
                for name in meshList:
                    if name.startswith(outconename):
                        ViewerDelete(GuiGetActiveViewerName(), name)
                outconeoutname = os.path.join(macropath, outconename+ ".flma")
                print meshList
                writeConeAsFLMA(outconevex, outconeoutname)
                PreLoadNative(str(outconename) + "(1)", outconeoutname );
                GuiUpdate(2,0)

            if display_axis:
                flmaname = "spray-axis" + "_noz_" + str(k)
                meshList = PreGetMeshes()
                for name in meshList:
                    if name.startswith(flmaname):
                        ViewerDelete(GuiGetActiveViewerName(), name)
                flmaoutname = flmaname +".flma"
                flmaout = open(os.path.join(macropath,flmaoutname), "w")
                flmaout.write(str(len(sprayvex)))
                flmaout.write("\n")
                for i in range(0,len(sprayvex)):
                    flmaout.write(" %g %g %g" % ( sprayvex[i][0],sprayvex[i][1],sprayvex[i][2]  ))
                flmaout.write("\n%d\n" % (len(sprayvex)/2))
                for i in range(0, len(sprayvex),2):
                    flmaout.write( "2\n%d %d\n" % ( i, i+1 ))

                flmaout.write("\n%d\n" % (len(sprayvex)/2))
                for i in range(0, len(sprayvex),2):
                    flmaout.write( " 1")
                flmaout.write("\n\n0\n" )
                flmaout.close()
                PreLoadNative(str(flmaname) + "(1)", str(os.path.join(macropath,flmaoutname)) );



    #        for i in range(0,nh*2,2):
    #            flmaname = "spray-axis" + "_noz_" + str(k) + "_hole_" + str(i/2)
    #            flmaoutname = flmaname +".flma"
    #            print flmaoutname
    #            flmaout = open(os.path.join(macropath,flmaoutname), "w")
    #            flmaout.write("2\n %g %g %g %g %g %g\n" % ( sprayvex[  i][0],sprayvex[  i][1],sprayvex[  i][2],
    #                                                        sprayvex[i+1][0],sprayvex[i+1][1],sprayvex[i+1][2]))
    #            flmaout.write( "1\n2\n0 1\n\n1\n1\n\n0\n" )
    #            flmaout.close()
    #            # calculate spray origin point
    #            if display_axis == 1:
    #                pass
    #                PreLoadNative(str(flmaname) + "(1)", str(os.path.join(macropath,flmaoutname)) );
    #            else:
    #                pass
                GuiUpdate(2,0)


class CaseChooser:

    def getChosenOne(self):
        model = self.combo.get_model()
        active = self.combo.get_active()
        if active < 0:
            return None
        return model[active][0]

    def destroyFrame(self, widget=None, data=None):
        print "destroy"
        while gtk.events_pending():
            gtk.main_iteration(False)
        print 'Quit'
        self.window.hide_all()
        gtk.main_quit()
        print 'After quit'

    def callBack(self, widget, data=None):
        print widget, data
        self.destroyFrame(widget,data)
        print "After destroy"
        if data=="OK":
            self.caseName = self.getChosenOne()
            self.callBackFunction(self.caseName)

    def createBbox(self):
        frame = gtk.Frame("Choose Case")
        bbox = gtk.HButtonBox()
        bbox.set_border_width(5)
        frame.add(bbox)
        bbox.set_layout(gtk.BUTTONBOX_SPREAD)
        button = gtk.Button(stock=gtk.STOCK_OK)
        bbox.add(button)
        button.connect("clicked", self.callBack, "OK")
        button = gtk.Button(stock=gtk.STOCK_CANCEL)
        bbox.add(button)
        button.connect_object("clicked", self.destroyFrame, None)
        return frame

    def createChooser(self, list):
        self.combo = gtk.combo_box_new_text()
        for line in list:
            self.combo.append_text(line)
        return self.combo

    def __init__(self, caseList, callbackFunction):
        self.caseName = None
        self.callBackFunction = callbackFunction
        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.window.set_position(gtk.WIN_POS_CENTER)
        #gtk_window_set_position(GTK_WINDOW(window), GTK_WIN_POS_CENTER);
        self.window.set_title("Choose Case for painting spray cones")
        self.window.connect("destroy", gtk.main_quit )
        self.window.set_border_width(10)
        main_vbox = gtk.VBox(False, 0)
        self.window.add(main_vbox)
        main_vbox.pack_start(self.createChooser(caseList), True, True, 10)
        main_vbox.pack_start(self.createBbox(), True, True, 10)
        self.window.show_all()

def getCaseNames():
    cases = FC_GuiPMGetCaseNames(0)
    print cases
    for i in range(len(cases)):
        cases[i] = cases[i][0:-6]
    print cases
    return cases

#    caseDir = os.path.join(os.curdir, "Calculation")
#    candidates = os.listdir(caseDir)
#    result  = []
#    for filename in candidates:
#        path = os.path.join(caseDir, filename)
#        if os.path.isdir(path):
#            result.append(filename)
#    return result

if __name__ == "__main__":
    if not GuiSolverReadSSFFile == None:
        basedir = PM_GetProjectIOData()[1]
        list = getCaseNames()
        list.sort()
        chooser = CaseChooser(list, doChanges)
        gtk.main()
        if not chooser.caseName==None:
#            GuiSolverDisableValues( "SOLVERGUI",0)
##            GuiSolverSetSolverName( "SOLVERGUI","FIRE")
#            GuiSolverSetSSFFileName( "SOLVERGUI",chooser.caseName + ".ssf")
#            GuiSolverReadSSFFile( "SOLVERGUI",os.path.abspath(os.path.join(basedir,"Calculation",chooser.caseName)))
#            GuiSolverSetSolverCaseName( "SOLVERGUI","- "+chooser.caseName)
            GuiUpdate(2,0)
    else:
        print os.path.abspath(os.curdir)
        dirContents = os.listdir(os.curdir)
        fprFound = False
        calcFound = False
        for filename in dirContents:
            if filename.endswith(".fpr"):
                fprFound = True
            if filename=="Calculation":
                calcFound = True

        if calcFound and fprFound:
            if len(sys.argv)>1:
                doChanges(sys.argv[1])
            else:
                print __doc__
        else:
            print __doc__
